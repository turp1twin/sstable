/**
 * Represents the immutable map from string to a list of strings with fast assoc access.
 * Only the index, stored at the end of the backing file, needs to fit in memory.
 * See http://hi.baidu.com/rsm219/blog/item/35642e81b3f03fc69123d992.html
 * Q: what happens if the index doesn't fit in memory?
 */

import java.io.{RandomAccessFile => RAF, File}
import scala.collection.SortedMap

object RandomAccess {
  def apply[T](f: File, mode: String)(fun: RAF => T): T = {
    val raf = new RAF(f, mode)
    try {
      fun(raf)
    } finally {
      raf.close()
    }
  }
}

class SSTable(f: File, index : SortedMap[String, Long]) {
  def this(f: File) = this(f, RandomAccess(f, "r") { in =>
    in.seek(0L)
    in.seek(in.readLong)
    val idxSize = in.readInt
    SortedMap(Stream continually (in.readUTF, in.readLong) take idxSize: _*)
  })

  def apply(key: String)(implicit raf: RAF): Option[Stream[String]] = {
    index get key map { offs =>
      Stream.iterate(offs){ offs =>
        raf.seek(offs - 8)
        raf.readLong
      } takeWhile (-1L !=) map { offs =>
        raf.seek(offs)
        raf.readUTF
      }
    }
  }

  def keys: Iterable[String] = index.keys

  def range(from: String, to: String): Iterable[String] = index.range(from, to).keys
}

object SSTable {
  def write(elems: Stream[(String, String)], f: File): SSTable = {
    import scala.collection.mutable.HashMap
    val index = new HashMap[String, Long] {
      override def default(k: String) = -1L
    }
    
    RandomAccess(f, "rw") { out =>
      // Index offset, to be overwritten later.
      out.writeLong(0L)

      for ((k, v) <- elems) {
        out.writeLong(index(k))
        index(k) = out.length
        out.writeUTF(v)
      }
      val idxOffset = out.length
      out.writeInt(index.size)
      for((k, offs) <- index) {
        out.writeUTF(k)
        out.writeLong(offs)
      }
      out.seek(0L)
      out.writeLong(idxOffset)
    }
    new SSTable(f, SortedMap(index.toSeq: _*))
  }
}
